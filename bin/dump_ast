#!/usr/bin/env dart
// vim: set filetype=dart: -*- mode: dart; -*

/**
 * Dump parsed AST for provided .dart files.
 *
 * Ref:
 *   http://pub.dartlang.org/packages/analyzer_experimental
 *   https://github.com/dart-lang/web-ui/blob/master/lib/src/observable_transform.dart
 */

import 'dart:collection';
import 'dart:io';

import 'package:analyzer_experimental/src/generated/java_core.dart';
import 'package:analyzer_experimental/src/generated/java_engine.dart';

// This package.
import 'package:dart2closure/debug.dart';
import 'package:dart2closure/parse.dart';
import 'package:dart2closure/utils.dart';


/**
 * Invoke as,
 *
 *    dart main.dart \
 *        <<<"var x = 1; class A {static staticMethod() {print(1);}}"
 *
 *       or
 *
 *    dart main.dart testdata/ex_01.dart
 *
 * And you should see this output:
 *
 *   CompilationUnit: var x = 1; class A {static staticMethod() {print(1);}}
 *     TopLevelVariableDeclaration: var x = 1;
 *       VariableDeclarationList: var x = 1
 *         VariableDeclaration: x = 1
 *           SimpleIdentifier: x
 *           IntegerLiteral: 1
 *     ClassDeclaration: class A {static staticMethod() {print(1);}}
 *       SimpleIdentifier: A
 *       MethodDeclaration: static staticMethod() {print(1);}
 *         SimpleIdentifier: staticMethod
 *         FormalParameterList: ()
 *         BlockFunctionBody: {print(1);}
 *           Block: {print(1);}
 *             ExpressionStatement: print(1);
 *               MethodInvocation: print(1)
 *                 SimpleIdentifier: print
 *                 ArgumentList: (1)
 *                   IntegerLiteral: 1
 */

parseAndDumpStream(Stream stream) {
  readFullStream(stream).then((text) {
    var ast = parseText(text);
    print(dumpAst(ast));
  });
}

main() {
  var fnames = new Options().arguments;
  if (fnames.length == 0) {
    print('File: <STDIN>');
    parseAndDumpStream(stdin);
  } else {
    for (var fname in fnames) {
      print('File: $fname');
      parseAndDumpStream(new File(fname).openRead());
      print('--\n');
    }
  }
}
